# -*- coding: utf-8 -*-
"""Final_Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z_2Y-hWiNY75BsHVhK7sE0MVfKJUQNpM
"""

!pip install kaggle

#uploading the kaggle API to google colab
import os
from google.colab import files

files.upload()

!mkdir -p ~/.kaggle/

!mv kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download datamunge/sign-language-mnist

#extracting the downloaded zip file
import zipfile

zip_file_path = "/content/sign-language-mnist.zip"

extract_dir = "/content/Dataset"

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

print("Dataset extracted successfully.")

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load dataset
def load_dataset():
    (train_images, train_labels), (test_images, test_labels) = mnist.load_data(path="/content/Dataset/sign_mnist_train.csv")
    train_images = train_images.reshape(train_images.shape[0], 28, 28, 1)
    test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)
    train_labels = to_categorical(train_labels, num_classes=26)  # Update num_classes to 26
    test_labels = to_categorical(test_labels, num_classes=26)  # Update num_classes to 26
    return train_images, train_labels, test_images, test_labels

def prep_pixels(train_images, test_images):
    train_images = train_images.astype('float32') / 255.0
    test_images = test_images.astype('float32') / 255.0
    return train_images, test_images

train_images, train_labels, test_images, test_labels = load_dataset()
train_images, test_images = prep_pixels(train_images, test_images)

"""CNN"""

model = tf.keras.Sequential([
    layers.Flatten(input_shape=(28, 28)),
    layers.Dense(512, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(256, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(26, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=10, batch_size=128)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define the data augmentation transformations
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

# Apply the transformations to the training data
train_generator = train_datagen.flow(train_images, train_labels, batch_size=128)

# Define the model
model = tf.keras.Sequential([
    layers.Flatten(input_shape=(28, 28, 1)),
    layers.Dense(512, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(256, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(26, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model with data augmentation
model.fit(train_generator, epochs=10, steps_per_epoch=len(train_images) // 128)